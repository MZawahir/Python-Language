(i)Play with some of the list functions. You can find the methods you can call on an object via the dir and get information about them via the help command:  
>>> dir(list)  
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',   '__delslice__', '__doc__', '__eq__', '__ge__', '__getattribute__',   
'__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__',   
'__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__',   
'__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__',   
'__rmul__', '__setattr__', '__setitem__', '__setslice__', '__str__',   'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse',  'sort']  
>>> help(list.reverse)  
Help on built-in function reverse:  
  
reverse(...)  
    L.reverse() -- reverse *IN PLACE*  
>>> lst = ['a','b','c']  
>>> lst.reverse()  
>>> ['c','b','a']   
Note: Ignore functions with underscores "_" around the names; these are private helper methods. Press 'q' to back out of a help screen
Solution:

lst = ['a','b','c','d','e','f','g','h']  

print(lst)
"""pop(...)
    L.pop([index]) -> item -- remove and return item at index (default last).
    Raises IndexError if list is empty or index is out of range. """
help(list.pop)  
print(lst.pop(3))
""" Help on method_descriptor:

reverse(...)
    L.reverse() -- reverse *IN PLACE*"""
lst.reverse() 
help(list.reverse)
print(lst)
""" sort(...)
    L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE* """
lst.sort() 
help(list.sort)
print(lst)
#By Muhammad Zawahir 








(ii)Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. 
Sample List : ['abc', 'xyz', 'aba', '1221']
Expected Result : 2  
Solution:

list = ['1','abc', 'xyz', 'aba', '1221']
temp =0
for i in list:
  if len(i) > 1 and i[0] == i[-1]:
    temp+=1
 
print(temp)
#By Muhammad Zawahir
